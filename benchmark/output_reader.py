import statistics
import matplotlib.pyplot as plt
import io
import xml.etree.ElementTree as ET
# reads output file generated by time_experiment.py
# USAGE: python3 output_reader.py


#Balance
f = open("output_balance", "r")
bigdata = {}
index = ""

# read file; gather only the values from a 'real' time measure
for line in f:
    line = line.strip()
    
    if "small" == line:
        bigdata["small"] = {}
        suba = bigdata["small"]
    if "mixture" == line:
        bigdata["mixture"] = {}
        suba = bigdata["mixture"]
    if "big" == line: 
        bigdata["big"] = {}
        suba = bigdata["big"]
    
    if line.isnumeric():
        index = line
    if "user" in line:
        tmp = line.split("\t")[-1]
        elapsed = tmp.split("elapsed")[0]
        time = elapsed.split(" ")[-1]

        min = float(time.split(":")[0])
        sec = float(time.split(":")[-1])
        
        total = min*60 + sec
        if index in suba:
            suba[index] = suba[index] + [total]
        else:
            suba[index] = [total]

print(bigdata)

means = {}
# find means for the time measurements
for size in bigdata:
    means[size] = {}
    for cores in bigdata[size]:
        m = statistics.mean(bigdata[size][cores])
        means[size][cores] = m

speedups = {}
# find speedup in the time measurements
for size in means:
    speedups[size] = {}
    for cores in means[size]:
        speedup = (means[size]["1"])/(means[size][cores])
        speedups[size][cores] = [speedup]

small = [x[-1] for x in speedups['small'].values()]
mixture = [x[-1] for x in speedups['mixture'].values()]
big = [x[-1] for x in speedups['big'].values()]

# create graph
xval = [1, 2, 4, 6, 8, 10, 12]

plt.plot(xval, small, label = "small")
plt.plot(xval, mixture, label = "mixture")
plt.plot(xval, big, label = "big")
plt.xlabel('Number of Threads')
plt.ylabel('Speedup')
plt.title('Speedup of BSP processing various picture sizes')
plt.xticks(xval, ["1","2", "4", "6", "8", "10", "12"])

plt.legend(loc='upper left') 


plt.savefig('Balance_speedup.png')

plt.clf()

#Steal 
f = open("output_steal", "r")
bigdata = {}
index = ""

# read file; gather only the values from a 'real' time measure
for line in f:
    line = line.strip()
    
    if "small" == line:
        bigdata["small"] = {}
        suba = bigdata["small"]
    if "mixture" == line:
        bigdata["mixture"] = {}
        suba = bigdata["mixture"]
    if "big" == line: 
        bigdata["big"] = {}
        suba = bigdata["big"]
    
    if line.isnumeric():
        index = line
    if "user" in line:
        tmp = line.split("\t")[-1]
        elapsed = tmp.split("elapsed")[0]
        time = elapsed.split(" ")[-1]

        min = float(time.split(":")[0])
        sec = float(time.split(":")[-1])
        
        total = min*60 + sec
        if index in suba:
            suba[index] = suba[index] + [total]
        else:
            suba[index] = [total]


means = {}
# find means for the time measurements
for size in bigdata:
    means[size] = {}
    for cores in bigdata[size]:
        m = statistics.mean(bigdata[size][cores])
        means[size][cores] = m

speedups = {}
# find speedup in the time measurements
for size in means:
    speedups[size] = {}
    for cores in means[size]:
        speedup = (means[size]["1"])/(means[size][cores])
        speedups[size][cores] = [speedup]

small = [x[-1] for x in speedups['small'].values()]
mixture = [x[-1] for x in speedups['mixture'].values()]
big = [x[-1] for x in speedups['big'].values()]

# create graph
xval = [1, 2, 4, 6, 8, 10, 12]

plt.plot(xval, small, label = "small")
plt.plot(xval, mixture, label = "mixture")
plt.plot(xval, big, label = "big")
plt.xlabel('Number of Threads')
plt.ylabel('Speedup')
plt.title('Speedup of Pipeline processing various picture sizes')
plt.xticks(xval, ["1","2", "4", "6", "8", "10", "12"])

plt.legend(loc='upper left') 


plt.savefig('Steal_speedup.png')

# # #Script generated in collaboration with Maggie Zhao
